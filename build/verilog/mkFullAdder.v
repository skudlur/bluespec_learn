//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa)
//
// On Wed Jul 26 15:41:27 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// add                            O    32 reg
// RDY_add                        O     1 const
// carry                          O    32 reg
// RDY_carry                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// add_a                          I    32
// add_b                          I    32
// add_c                          I    32
// carry_a                        I    32
// carry_b                        I    32
// carry_c                        I    32
// EN_add                         I     1
// EN_carry                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFullAdder(CLK,
		   RST_N,

		   add_a,
		   add_b,
		   add_c,
		   EN_add,
		   add,
		   RDY_add,

		   carry_a,
		   carry_b,
		   carry_c,
		   EN_carry,
		   carry,
		   RDY_carry);
  input  CLK;
  input  RST_N;

  // actionvalue method add
  input  [31 : 0] add_a;
  input  [31 : 0] add_b;
  input  [31 : 0] add_c;
  input  EN_add;
  output [31 : 0] add;
  output RDY_add;

  // actionvalue method carry
  input  [31 : 0] carry_a;
  input  [31 : 0] carry_b;
  input  [31 : 0] carry_c;
  input  EN_carry;
  output [31 : 0] carry;
  output RDY_carry;

  // signals for module outputs
  wire [31 : 0] add, carry;
  wire RDY_add, RDY_carry;

  // register c_in
  reg [31 : 0] c_in;
  wire [31 : 0] c_in$D_IN;
  wire c_in$EN;

  // register c_out
  reg [31 : 0] c_out;
  wire [31 : 0] c_out$D_IN;
  wire c_out$EN;

  // register op1
  reg [31 : 0] op1;
  wire [31 : 0] op1$D_IN;
  wire op1$EN;

  // register op2
  reg [31 : 0] op2;
  wire [31 : 0] op2$D_IN;
  wire op2$EN;

  // register out
  reg [31 : 0] out;
  wire [31 : 0] out$D_IN;
  wire out$EN;

  // rule scheduling signals
  wire CAN_FIRE_add, CAN_FIRE_carry, WILL_FIRE_add, WILL_FIRE_carry;

  // remaining internal signals
  wire [31 : 0] x__h323, x__h482, x__h484, y__h483, y__h485;

  // actionvalue method add
  assign add = out ;
  assign RDY_add = 1'd1 ;
  assign CAN_FIRE_add = 1'd1 ;
  assign WILL_FIRE_add = EN_add ;

  // actionvalue method carry
  assign carry = c_out ;
  assign RDY_carry = 1'd1 ;
  assign CAN_FIRE_carry = 1'd1 ;
  assign WILL_FIRE_carry = EN_carry ;

  // register c_in
  assign c_in$D_IN = EN_add ? add_c : carry_c ;
  assign c_in$EN = EN_add || EN_carry ;

  // register c_out
  assign c_out$D_IN = x__h482 | y__h483 ;
  assign c_out$EN = EN_carry ;

  // register op1
  assign op1$D_IN = EN_add ? add_a : carry_a ;
  assign op1$EN = EN_add || EN_carry ;

  // register op2
  assign op2$D_IN = EN_add ? add_b : carry_b ;
  assign op2$EN = EN_add || EN_carry ;

  // register out
  assign out$D_IN = x__h323 + c_in ;
  assign out$EN = EN_add ;

  // remaining internal signals
  assign x__h323 = op1 + op2 ;
  assign x__h482 = x__h484 | y__h485 ;
  assign x__h484 = op1 & op2 ;
  assign y__h483 = op1 & c_in ;
  assign y__h485 = op2 & c_in ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        c_in <= `BSV_ASSIGNMENT_DELAY 32'd0;
	op1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	op2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (c_in$EN) c_in <= `BSV_ASSIGNMENT_DELAY c_in$D_IN;
	if (op1$EN) op1 <= `BSV_ASSIGNMENT_DELAY op1$D_IN;
	if (op2$EN) op2 <= `BSV_ASSIGNMENT_DELAY op2$D_IN;
      end
    if (c_out$EN) c_out <= `BSV_ASSIGNMENT_DELAY c_out$D_IN;
    if (out$EN) out <= `BSV_ASSIGNMENT_DELAY out$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    c_in = 32'hAAAAAAAA;
    c_out = 32'hAAAAAAAA;
    op1 = 32'hAAAAAAAA;
    op2 = 32'hAAAAAAAA;
    out = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFullAdder

